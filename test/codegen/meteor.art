/* The Computer Language Benchmarks Game
 * http://benchmarksgame.alioth.debian.org/
 *
 * ported to impala from Christian Vosteen's C solution
 * ported to artic from impala version
 */

#[import(cc = "C")] fn atoi(&[u8]) -> i32;
#[import(cc = "C")] fn println(&[u8]) -> ();
#[import(cc = "C")] fn print_u8(u8) -> ();
#[import(cc = "C")] fn print_f64(f64) -> ();
#[import(cc = "C")] fn print_piece_mask(&[u64]) -> ();
#[import(cc = "C")] fn print_meteor_scnt(i32) -> ();
#[import(cc = "C")] fn print_meteor_lines(&[i8]) -> ();
#[import(cc = "C")] fn print_piece_def(&[[i8*4]*10]) -> ();

fn @range_step(body: fn (i32) -> ()) = @|beg: i32, end: i32, step: i32| {
    fn loop(a: i32, b: i32) -> () {
        if a < b {
            @body(a);
            loop(a + step, b)
        }
    }
    loop(beg, end)
}

fn range(body: fn (i32) -> ()) = @|a: i32, b: i32| range_step(body)(a, b, 1)

/* The board is a 50 cell hexagonal pattern.  For    . . . . .
 * maximum speed the board will be implemented as     . . . . .
 * 50 bits, which will fit into a 64 bit long long   . . . . .
 * int.                                               . . . . .
 *                                                   . . . . .
 * I will represent 0's as empty cells and 1's        . . . . .
 * as full cells.                                    . . . . .
 *                                                    . . . . .
 *                                                   . . . . .
 *                                                    . . . . .
 */
static mut board : u64 = 0xFFFC000000000000;

/* The puzzle pieces must be specified by the path followed
 * from one end to the other along 12 hexagonal directions.
 *
 *   Piece 0   Piece 1   Piece 2   Piece 3   Piece 4
 *
 *  O O O O    O   O O   O O O     O O O     O   O
 *         O    O O           O       O       O O
 *                           O         O         O
 *
 *   Piece 5   Piece 6   Piece 7   Piece 8   Piece 9
 *
 *    O O O     O O       O O     O O        O O O O
 *       O O       O O       O       O O O        O
 *                  O       O O
 *
 * I had to make it 12 directions because I wanted all of the
 * piece definitions to fit into the same size arrays.  It is
 * not possible to define piece 4 in terms of the 6 cardinal
 * directions in 4 moves.
 */
static E     : i8 = 0;
static ESE   : i8 = 1;
static SE    : i8 = 2;
static S     : i8 = 3;
static SW    : i8 = 4;
static WSW   : i8 = 5;
static W     : i8 = 6;
static WNW   : i8 = 7;
static NW    : i8 = 8;
static N     : i8 = 9;
static NE    : i8 = 10;
static ENE   : i8 = 11;
static PIVOT : i8 = 12;

static mut piece_def = [
   [  E,  E,  E, SE],
   [ SE,  E, NE,  E],
   [  E,  E, SE, SW],
   [  E,  E, SW, SE],
   [ SE,  E, NE,  S],
   [  E,  E, SW,  E],
   [  E, SE, SE, NE],
   [  E, SE, SE,  W],
   [  E, SE,  E,  E],
   [  E,  E,  E, SW]
];

/* To minimize the amount of work done in the recursive solve function below,
 * I'm going to allocate enough space for all legal rotations of each piece
 * at each position on the board. That's 10 pieces x 50 board positions x
 * 12 rotations.  However, not all 12 rotations will fit on every cell, so
 * I'll have to keep count of the actual number that do.
 * The pieces are going to be unsigned long long ints just like the board so
 * they can be bitwise-anded with the board to determine if they fit.
 * I'm also going to record the next possible open cell for each piece and
 * location to reduce the burden on the solve function.
 */
static mut pieces       : [[[u64 * 12]*50]*10];
static mut piece_counts : [[i32 * 50]*10];
static mut next_cell    : [[[i8 * 12]*50]*10];

/* Returns the direction rotated 60 degrees clockwise */
fn rotate(dir: i8) -> i8 {
    ((dir as i32 + 2) % (PIVOT as i32)) as i8
}

/* Returns the direction flipped on the horizontal axis */
fn flip(dir: i8) -> i8 {
    (PIVOT - dir) % PIVOT
}

/* Returns the new cell index from the specified cell in the
 * specified direction.  The index is only valid if the
 * starting cell and direction have been checked by the
 * out_of_bounds function first.
 */
fn shift(cell: i8, dir: i8) {
    if dir == E {
        cell + 1
    } else if dir == ESE {
        if ((cell / 5) % 2) != 0 {
            cell + 7
        } else {
            cell + 6
        }
    } else if dir == SE {
       if ((cell / 5) % 2) != 0 {
            cell + 6
       } else {
            cell + 5
       }
    } else if dir == S {
        cell + 10
    } else if dir == SW {
        if ((cell / 5) % 2) != 0 {
            cell + 5
        } else {
            cell + 4
        }
    } else if dir == WSW {
        if ((cell / 5) % 2) != 0 {
            cell + 4
        } else {
            cell + 3
        }
    } else if dir == W {
        cell - 1
    } else if dir == WNW {
        if ((cell / 5) % 2) != 0 {
            cell - 6
        } else {
            cell - 7
        }
    } else if dir == NW {
        if ((cell / 5) % 2) != 0 {
            cell - 5
        } else {
            cell - 6
        }
    } else if dir == N {
        cell - 10
    } else if dir == NE {
        if ((cell / 5) % 2) != 0 {
            cell - 4
        } else {
            cell - 5
        }
    } else if dir == ENE {
        if ((cell / 5) % 2) != 0 {
            cell - 3
        } else {
            cell - 4
        }
    } else {
        cell
    }
}

/* Returns wether the specified cell and direction will land outside
 * of the board.  Used to determine if a piece is at a legal board
 * location or not.
 */
fn out_of_bounds(cell: i8, dir: i8) {
    if dir == E {
        cell % 5 == 4
    } else if dir == ESE {
        let i = cell % 10;
        i == 4 || i == 8 || i == 9 || cell >= 45
    } else if dir == SE {
        cell % 10 == 9 || cell >= 45
    } else if dir == S {
        cell >= 40
    } else if dir == SW {
        cell % 10 == 0 || cell >= 45
    } else if dir == WSW {
        let i = cell % 10;
        i == 0 || i == 1 || i == 5 || cell >= 45
    } else if dir == W {
        cell % 5 == 0
    } else if dir == WNW {
        let i = cell % 10;
        i == 0 || i == 1 || i == 5 || cell < 5
    } else if dir == NW {
        cell % 10 == 0 || cell < 5
    } else if dir == N {
        cell < 10
    } else if dir == NE {
        cell % 10 == 9 || cell < 5
    } else if dir == ENE {
        let i = cell % 10;
        i == 4 || i == 8 || i == 9 || cell < 5
    } else {
        false
    }
}

/* Rotate a piece 60 degrees clockwise */
fn rotate_piece(piece: i32) {
    for i in range(0, 4) {
        piece_def(piece)(i) = rotate(piece_def(piece)(i));
    }
}

/* Flip a piece along the horizontal axis */
fn flip_piece(piece: i32)  {
    for i in range(0, 4) {
        piece_def(piece)(i) = flip(piece_def(piece)(i));
    }
}

/* Convenience function to quickly calculate all of the indices for a piece */
fn calc_cell_indices(cell: &mut [i8], piece: i32, index: i8)  {
    cell(0) = index;
    cell(1) = shift(cell(0), piece_def(piece)(0));
    cell(2) = shift(cell(1), piece_def(piece)(1));
    cell(3) = shift(cell(2), piece_def(piece)(2));
    cell(4) = shift(cell(3), piece_def(piece)(3));
}

/* Convenience function to quickly calculate if a piece fits on the board */
fn cells_fit_on_board(cell: &[i8], piece: i32) =
    !out_of_bounds(cell(0), piece_def(piece)(0)) &&
    !out_of_bounds(cell(1), piece_def(piece)(1)) &&
    !out_of_bounds(cell(2), piece_def(piece)(2)) &&
    !out_of_bounds(cell(3), piece_def(piece)(3))

/* Returns the lowest index of the cells of a piece.
 * I use the lowest index that a piece occupies as the index for looking up
 * the piece in the solve function.
 */
fn minimum_of_cells(cell: &[i8]) {
    let mut minimum = cell(0);
    minimum = if cell(1) < minimum { cell(1) } else { minimum };
    minimum = if cell(2) < minimum { cell(2) } else { minimum };
    minimum = if cell(3) < minimum { cell(3) } else { minimum };
    minimum = if cell(4) < minimum { cell(4) } else { minimum };
    minimum
}

/* Calculate the lowest possible open cell if the piece is placed on the board.
 * Used to later reduce the amount of time searching for open cells in the
 * solve function.
 */
fn first_empty_cell(cell: &[i8], minimum: i8) {
    let mut first_empty = minimum;
    while (
        first_empty == cell(0) || first_empty == cell(1) ||
        first_empty == cell(2) || first_empty == cell(3) ||
        first_empty == cell(4))
    {
        first_empty++;
    }
    first_empty
}

/* Generate the unsigned long long int that will later be anded with the
 * board to determine if it fits.
 */
fn bitmask_from_cells(cell: &[i8]) {
    let mut piece_mask : u64 = 0;
    for i in range(0, 5) {
        piece_mask |= (1 : u64) << (cell(i) as u64);
    }
    piece_mask
}

/* Record the piece and other important information in arrays that will
 * later be used by the solve function.
 */
fn record_piece(piece: i32, minimum: i32, first_empty: i8, piece_mask: u64) -> () {
    pieces(piece)(minimum)(piece_counts(piece)(minimum)) = piece_mask;
    next_cell(piece)(minimum)(piece_counts(piece)(minimum)) = first_empty;
    piece_counts(piece)(minimum)++;
}

/* Fill the entire board going cell by cell.  If any cells are "trapped"
 * they will be left alone.
 */
fn fill_contiguous_space(board: &mut [i8], index: i8) -> () {
    if board(index) == 1 {
        return()
    }

    board(index) = 1;
    if !out_of_bounds(index, E) {
       fill_contiguous_space(board, shift(index, E));
    }
    if !out_of_bounds(index, SE) {
       fill_contiguous_space(board, shift(index, SE));
    }
    if !out_of_bounds(index, SW) {
       fill_contiguous_space(board, shift(index, SW));
    }
    if !out_of_bounds(index, W) {
       fill_contiguous_space(board, shift(index, W));
    }
    if !out_of_bounds(index, NW) {
       fill_contiguous_space(board, shift(index, NW));
    }
    if !out_of_bounds(index, NE) {
       fill_contiguous_space(board, shift(index, NE));
    }
}


/* To thin the number of pieces, I calculate if any of them trap any empty
 * cells at the edges.  There are only a handful of exceptions where the
 * the board can be solved with the trapped cells.  For example:  piece 8 can
 * trap 5 cells in the corner, but piece 3 can fit in those cells, or piece 0
 * can split the board in half where both halves are viable.
 */
fn has_island(cell: &[i8], piece: i32) {
    let mut temp_board : [i8 * 50];
    for i in range(0, 50) {
        temp_board(i) = 0;
    }
    for i in range(0, 5) {
        temp_board(cell(i)) = 1;
    }
    let mut i = 49;
    while temp_board(i) != 0 {
        i--;
    }
    fill_contiguous_space(&mut temp_board, i as i8);
    let mut c = 0;
    for j in range(0, 50) {
        if temp_board(j) == 0 {
            c++;
        }
    }
    !(c == 0 || (c == 5 && piece == 8) || (c == 40 && piece == 8) || (c % 5 == 0 && piece == 0))
}

/* Calculate all six rotations of the specified piece at the specified index.
 * We calculate only half of piece 3's rotations.  This is because any solution
 * found has an identical solution rotated 180 degrees.  Thus we can reduce the
 * number of attempted pieces in the solve algorithm by not including the 180-
 * degree-rotated pieces of ONE of the pieces.  I chose piece 3 because it gave
 * me the best time ;)
 */
fn calc_six_rotations(piece: i32, index: i8) {
    let mut cell: [i8 * 5];

    for rotation in range(0, 6) {
        if piece != 3 || rotation < 3 {
            calc_cell_indices(&mut cell, piece, index);
            if cells_fit_on_board(&cell, piece) && !has_island(&cell, piece) {
                let minimum = minimum_of_cells(&cell);
                let first_empty = first_empty_cell(&cell, minimum);
                let piece_mask = bitmask_from_cells(&cell);
                record_piece(piece, minimum as i32, first_empty, piece_mask);
            }
        }
        rotate_piece(piece);
    }
}

/* Calculate every legal rotation for each piece at each board location. */
fn calc_pieces() {
    for piece in range(0, 10) {
        for index in range(0, 50) {
            calc_six_rotations(piece, index as i8);
            flip_piece(piece);
            calc_six_rotations(piece, index as i8);
        }
    }
}

/* Calculate all 32 possible states for a 5-bit row and all rows that will
 * create islands that follow any of the 32 possible rows.  These pre-
 * calculated 5-bit rows will be used to find islands in a partially solved
 * board in the solve function.
 */
static ROW_MASK    = 0x1F;
static TRIPLE_MASK = 0x7FFF;
static mut bad_even_rows   : [[bool*32]*32];
static mut bad_odd_rows    : [[bool*32]*32];
static mut bad_even_triple : [bool*32768];
static mut bad_odd_triple  : [bool*32768];

fn rows_bad(row1: i32, row2: i32, even: bool) -> bool {
    /* even is referring to row1 */
    let mut row2_shift: i32;
    /* Test for blockages at same index and shifted index */
    if even  {
        row2_shift = ((row2 << 1) & ROW_MASK) | 0x01;
    } else {
        row2_shift = (row2 >> 1) | 0x10;
    }
    let block = ((row1 ^ row2) & row2) & ((row1 ^ row2_shift) & row2_shift);
    /* Test for groups of 0's */
    let mut in_zeroes = false;
    let mut group_okay = false;
    for i in range(0, 5) {
        if (row1 & (1 << i)) != 0 {
            if in_zeroes {
                if !group_okay  {
                    return(true)
                }
                in_zeroes = false;
                group_okay = false;
            }
        } else {
            if !in_zeroes  {
                in_zeroes = true;
            }
            if (block & (1 << i)) == 0 {
                group_okay = true;
            }
        }
    }
    if in_zeroes {
        !group_okay
    } else {
        false
    }
}

/* Check for cases where three rows checked sequentially cause a false
 * positive.  One scenario is when 5 cells may be surrounded where piece 5
 * or 7 can fit.  The other scenario is when piece 2 creates a hook shape.
 */
fn triple_is_okay(row1: i32, row2: i32, row3: i32, even: bool) {
    if even {
        /* There are four cases:
         * row1: 00011  00001  11001  10101
         * row2: 01011  00101  10001  10001
         * row3: 011??  00110  ?????  ?????
         */
        ((row1 == 0x03) && (row2 == 0x0B) && ((row3 & 0x1C) == 0x0C)) ||
        ((row1 == 0x01) && (row2 == 0x05) && (row3 == 0x06)) ||
        ((row1 == 0x19) && (row2 == 0x11)) ||
        ((row1 == 0x15) && (row2 == 0x11))
    } else {
        /* There are two cases:
         * row1: 10011  10101
         * row2: 10001  10001
         * row3: ?????  ?????
         */
        ((row1 == 0x13) && (row2 == 0x11)) ||
        ((row1 == 0x15) && (row2 == 0x11))
    }
}


fn calc_rows() {
    for row1 in range(0, 32) {
        for row2 in range(0, 32) {
            bad_even_rows(row1)(row2) = rows_bad(row1, row2, true);
            bad_odd_rows(row1)(row2)  = rows_bad(row1, row2, false);
        }
    }
    for row1 in range(0, 32) {
        for row2 in range(0, 32) {
            for row3 in range(0, 32) {
                let mut result1 = bad_even_rows(row1)(row2);
                let mut result2 = bad_odd_rows(row2)(row3);
                if !result1 && result2 && triple_is_okay(row1, row2, row3, true) {
                    bad_even_triple(row1+(row2 * 32)+(row3 * 1024)) = false;
                } else {
                    bad_even_triple(row1+(row2 * 32)+(row3 * 1024)) = result1 || result2;
                }
    
                result1 = bad_odd_rows(row1)(row2);
                result2 = bad_even_rows(row2)(row3);
                if !result1 && result2 && triple_is_okay(row1, row2, row3, false) {
                    bad_odd_triple(row1+(row2 * 32)+(row3 * 1024)) = false;
                } else {
                    bad_odd_triple(row1+(row2 * 32)+(row3 * 1024)) = result1 || result2;
                }
            }
        }
    }
}

/* Calculate islands while solving the board.  */
fn board_has_islands(cell: i8) -> bool {
    /* Too low on board, don't bother checking */
    if cell >= 40 {
        return(false)
    }
    let current_triple = ((board >> (((cell / 5) * 5) as u64)) & TRIPLE_MASK as u64) as i32;
    if ((cell / 5) % 2) != 0 {
        bad_odd_triple(current_triple)
    } else {
        bad_even_triple(current_triple)
    }
}

/* The recursive solve algorithm.  Try to place each permutation in the upper-
 * leftmost empty cell.  Mark off available pieces as it goes along.
 * Because the board is a bit mask, the piece number and bit mask must be saved
 * at each successful piece placement.  This data is used to create a 50 char
 * array if a solution is found.
 */
static mut avail : i16 = 0x03FF;

static mut sol_nums  : [i8*10];
static mut sol_masks : [u64*10];
static mut solutions : [[i8*50]*2100];

static mut solution_count = 0;
static mut max_solutions = 2098;

fn record_solution() {
    for sol_no in range(0, 10) {
        let mut sol_mask = sol_masks(sol_no);
        for index in range(0, 50) {
            if (sol_mask & 1) != 0 {
                solutions(solution_count)(index) = sol_nums(sol_no);
                /* Board rotated 180 degrees is a solution too! */
                solutions(solution_count+1)(49-index) = sol_nums(sol_no);
            }
            sol_mask = sol_mask >> 1;
        }
    }
    solution_count += 2;
}

fn solve(depth: i32, mut cell: i32) -> () {
    if solution_count >= max_solutions {
        return()
    }

    while (board & ((1 : u64) << (cell as u64))) != 0 {
        cell++;
    }

    for piece in range(0, 10) {
        let piece_no_mask = (1 << piece) as i16;
        if (avail & piece_no_mask) == 0 {
            continue()
        }

        avail ^= piece_no_mask;
        let max_rots = piece_counts(piece)(cell);
        let piece_mask = &pieces(piece)(cell);
        for rotation in range(0, max_rots) {
            if (board & piece_mask(rotation as i8)) == 0 {
                sol_nums(depth) = piece as i8;
                sol_masks(depth) = piece_mask(rotation);
                if depth == 9 {
                    /* Solution found!!!!!11!!ONE! */
                    record_solution();
                    avail ^= piece_no_mask;
                    return()
                }
                board |= piece_mask(rotation);
                if !board_has_islands(next_cell(piece)(cell)(rotation)) {
                    solve(depth + 1, next_cell(piece)(cell)(rotation) as i32);
                }
                board ^= piece_mask(rotation);
            }
        }
        avail ^= piece_no_mask;
    }
}

/* qsort comparator - used to find first and last solutions */
fn compare_solutions(elem1: &[i8], elem2: &[i8]) {
    let mut i = 0;
    while i < 50 && elem1(i) == elem2(i) {
        i++;
    }
    elem1(i) - elem2(i)
}

// searching is linear time, qsort n*log(n)
fn find_minmax(ary: &[[i8*50]], size: i32) -> (&[i8], &[i8]) {
    let mut min = &ary(0);
    let mut max = &ary(0);
    for i in range(1, size) {
        let sol = &ary(i);
        if compare_solutions(min, sol) > 0 {
            min = sol;
        } else if compare_solutions(max, sol) < 0 {
            max = sol;
        }
    }
    (min, max)
}

/* pretty print a board in the specified hexagonal format */
fn pretty(b: &[i8]) -> () {
    for i in range_step(0, 50, 10) {
        print_meteor_lines((&b(i)) as &[i8]);
    }
    println("");
}

#[export]
fn main(argc: i32, argv: &[&[u8]]) {
    let n = if argc >= 2 { atoi(argv(1)) } else { 0 };
    max_solutions = n;
    calc_pieces();
    calc_rows();
    solve(0, 0);
    print_meteor_scnt(solution_count);
    let (min, max) = find_minmax(&solutions as &[[i8*50]], solution_count);
    pretty(min);
    pretty(max);
    0
}
