enum E {
    A, B(i32)
}
enum F[T] {
    A, B(T)
}
enum G[T, U] {
    A, B(T, U)
}

fn main() {
    match E::A { E::A => 1 };
    match E::A { E::B(z) => z };
    match F[i32]::A { F[i32]::A => 1 };
    match F[i32]::A { F[i32]::B(z) => z };
    match G[i32, i64]::A { G[i32, i64]::A => 1 };
    match G[i32, i64]::A { G[i32, i64]::B(z) => z };
    match E::A {
        E::A(1) => 1,
        E::B => 2
    }
}
