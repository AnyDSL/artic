type SortingNetwork = fn (i32, fn (i32, i32) -> ()) -> ();
type Range[T] = fn (T, T) -> ();

fn @unroll(body: fn (i32) -> ()) -> Range[i32] {
    fn @(?beg & ?end) loop(beg: i32, end: i32) -> () {
        if beg < end {
            @body(beg);
            loop(beg + 1, end)
        }
    }
    loop
}

fn @ilog2(n: i32) -> i32 {
    fn @(?i & ?p) ilog2_helper(i: i32, p: i32) -> i32 {
        if i <= (1 << p) {
            p
        } else {
            ilog2_helper(i, p + 1)
        }
    }
    ilog2_helper(n, 0)
}

fn @select[T](c: bool, t: T, f: T) -> T { if c { t } else { f } }

fn @bose_nelson_sort(n: i32, cmp_swap: fn (i32, i32) -> ()) -> () {
    fn @(?len) p_star(i: i32, len: i32) -> () {
        if len > 1 {
            let m = len >> 1;
            p_star(i, m);
            p_star((i + m), (len - m));
            p_bracket(i, m, (i + m), (len - m));
        }
    }

    fn @(?len1 & ?len2) p_bracket(i: i32, len1: i32, j: i32, len2: i32) -> () {
        if len1 == 1 && len2 == 1 {
            cmp_swap(i, j);
        } else if len1 == 1 && len2 == 2 {
            cmp_swap(i, j + 1);
            cmp_swap(i, j);
        } else if len1 == 2 && len2 == 1 {
            cmp_swap(i, j);
            cmp_swap(i + 1, j);
        } else {
            let a = len1 >> 1;
            let b = select[i32]((len1 & 1) != 0, len2 >> 1, (len2 + 1) >> 1);
            p_bracket(i, a, j, b);
            p_bracket((i + a), (len1 - a), (j + b), (len2 - b));
            p_bracket((i + a), (len1 - a), j, b);
        }
    }

    p_star(0, n)
}

fn @bitonic_sort(n: i32, cmp_swap: fn (i32, i32) -> ()) -> () {
    fn @(?i & ?len & ?dir) merge(i: i32, len: i32, dir: bool) -> () {
        if len > 1 {
            // Compute greatest power of two lower than len
            let m = 1 << (ilog2(len) - 1);

            for j in unroll(i, i + len - m) {
                cmp_swap(select[i32](dir, j, j + m), select[i32](dir, j + m, j));
            }

            merge(i, m, dir);
            merge(i + m, len - m, dir);
        }
    }

    fn @(?i & ?len & ?dir) sort(i: i32, len: i32, dir: bool) -> () {
        if len > 1 {
            let m = len >> 1;
            sort(i, m, !dir);
            sort(i + m, len - m, dir);
            merge(i, len, dir);
        }
    }

    sort(0, n, true)
}

fn @(?n) sort_n(e: &mut [i32], n: i32, network: SortingNetwork) = network(n, @|i, j| {
    if e(i) < e(j) {
        let t = e(i);
        e(i) = e(j);
        e(j) = t;
    }
})

#[export]
fn sort_2_bose_nelson(e: &mut [i32 * 2], n: i32) = sort_n(e, 2, bose_nelson_sort)
#[export]
fn sort_2_bitonic(e: &mut [i32 * 2], n: i32) = sort_n(e, 2, bitonic_sort)
