enum E {
    A, B(i32)
}
enum F[T] {
    A, B(T)
}
enum G[T, U] {
    A, B(T, U)
}

fn id(i: i32) = i

fn test1[T](f: F[T]) {
    match f {
        F[T]::A => 1,
        F[T]::B(_) => 2
    }
}

#[export]
fn test2(e: E, f1: F[i32], f2: F[u32], g: G[i32, i64]) {
    match e {
        _ => id(1)
    }
    match e {
        E::A => 1,
        E::B(5) => 2,
        _ => id(3)
    }
    test1(f1);
    test1(f2);
    match g {
        G[i32, i64]::A => 1,
        G[i32, i64]::B(5, 6) => 2,
        G[i32, i64]::B(z, 6) => z + 2,
        _ => id(3)
    }
}
