#[export]
fn test1() {
    match 1 {
        2 => 3,
        4 => 5,
        _ => 6
    }
}
#[export]
fn test2(x: bool, y: i32) {
    let (_, _) = (x, y);
    match (x, y) {
        (true, 1) => 1,
        (false, _) => 2,
        (_, mut x) => x
    }
}
#[export]
fn test3(x: i32, y: i32) {
    let [_, _] = [x, y];
    match [x, y] {
        [0, 1] => 1,
        [1, _] => 2,
        [_, mut x] => x
    }
}
#[export]
fn test4(x: i32, y: i32) {
    let simd[_, _] = simd[x, y];
    match simd[x, y] {
        simd[0, 1] => 1,
        simd[1, _] => 2,
        simd[_, mut x] => x
    }
}
#[export]
fn test5(x: i32, y: i32) {
    match (x, simd[x, y], (x, [(x, y), (y, x)])) {
        (0, simd[0, 1], (0, [(0, 1), (1, 0)])) => 1,
        (1, simd[1, _], (1, [(1, _), (_, 1)])) => 2,
        (_, simd[_, mut __x], (_, [(_, mut _x), (mut x, _)])) => x
    }
}
