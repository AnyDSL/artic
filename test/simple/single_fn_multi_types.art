struct S {}

trait T[A]   { fn f(A) -> i32; }
impl T[S]    { fn f(S) -> i32 = 0; }
impl T[bool] { fn f(bool) -> i32 = 1; }
impl T[i32]  { fn f(i32) -> i32 = 2; }

trait G[A] { fn f(A) -> i32; }
#[allow_undecidable_impl]
impl[A] G[A] where T[A]{ fn f(a: A) = T[A]::f(a); }

trait H[A] where T[A] { fn f(a: A) = T[A]::f(a); }
impl H[S]  {}
impl H[bool] {}
impl H[i32] { fn f(_: i32) = 14; }

#[export]
fn f() = (G[S]::f(S{}), G[bool]::f(true), G[i32]::f(1), H[S]::f(S{}), H[bool]::f(true), H[i32]::f(1));
