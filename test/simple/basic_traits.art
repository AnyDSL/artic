trait Id[A] { fn id(_: A) -> A; }
impl[B] Id[B] { fn id(b: B) = b; }

trait Foo { fn foo() -> i32; }
impl Foo { fn foo() = 1; }

#[export] fn example_mono_i32(x: i32) -> i32   = Id[i32]::id(x) + Foo::foo();
#[export] fn example_mono_i32_2(x: i32) -> i32 = Id[i32]::id(x) + Foo::foo();
#[export] fn example_mono_i64(x: i64) -> i64   = Id[i64]::id(x) + Foo::foo() as i64;
#[export] fn example_mono_i64_2(x: i64) -> i64 = Id[i64]::id(x) + Foo::foo() as i64;

fn example_poly[T](x: T) where Id[T] = Id[T]::id(x);

#[export] fn example_poly_inst_i32() = example_poly(1);
#[export] fn example_poly_inst_i32_2() = example_poly(1);
#[export] fn example_poly_inst_i64() = example_poly[i64](1);
#[export] fn example_poly_inst_i64_2() = example_poly[i64](1);
