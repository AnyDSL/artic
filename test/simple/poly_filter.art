trait Pow[T, U] where FromInt[T], Mul[T], CmpEq[U], FromInt[U], Rem[U], Div[U], Sub[U];
fn @(?n) pow[T, U](x: T, n: U) -> T where Pow[T, U] {
    if n == 0 {
        1
    } else if n % 2 == 0 {
        let y = pow(x, n / 2);
        y * y
    } else {
        x * pow(x, n - 1)
    }
}
