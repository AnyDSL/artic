# Adds a test that must fail to the lists of test to run.
function (add_failure_test)
    cmake_parse_arguments(test "" "NAME" "COMMAND" ${ARGN})
    add_test(NAME ${test_NAME} COMMAND ${test_COMMAND})
    set_tests_properties(${test_NAME} PROPERTIES WILL_FAIL TRUE)
endfunction ()

# Adds all the tests in a given directory. Tests that contain "werror"
# in their name will be run with warnings treated like errors.
function (add_tests_in_directory)
    cmake_parse_arguments(test "" "PREFIX;WILL_FAIL;DIRECTORY" "" ${ARGN})
    file(GLOB test_FILES LIST_DIRECTORIES FALSE CONFIGURE_DEPENDS ${test_DIRECTORY}/*.art)
    foreach (test_FILE_NAME ${test_FILES})
        get_filename_component(test_NAME ${test_FILE_NAME} NAME_WE)
        set(test_NAME "${test_PREFIX}_${test_NAME}")
        set(test_WERROR)
        if (${test_FILE_NAME} MATCHES "werror")
            set(test_WERROR "--warnings-as-errors")
        endif ()
        add_test(NAME ${test_NAME} COMMAND artic --print-ast ${test_WERROR} ${test_FILE_NAME})
        set_tests_properties(${test_NAME} PROPERTIES WILL_FAIL ${test_WILL_FAIL})
    endforeach ()
endfunction ()

add_test(NAME version COMMAND artic --version)
add_test(NAME help    COMMAND artic --help)

add_failure_test(NAME dup_strict  COMMAND artic --strict --strict)
add_failure_test(NAME unknown_opt COMMAND artic --unknown-opt)
add_failure_test(NAME empty_files COMMAND artic --strict)
add_failure_test(NAME cannot_open COMMAND artic file-that-hopefully-does-not-exist.insane-extension)
add_failure_test(NAME open_dir    COMMAND artic ${CMAKE_CURRENT_BINARY_DIR})

add_tests_in_directory(PREFIX simple  DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/simple  WILL_FAIL FALSE)
add_tests_in_directory(PREFIX failure DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/failure WILL_FAIL TRUE)

set(CODEGEN_TESTS "")
if (Thorin_HAS_LLVM_SUPPORT)
    # This version is required for the --ignore-eol flag used when comparing files
    cmake_minimum_required(VERSION 3.14 FATAL_ERROR)

    find_package(Clang REQUIRED CONFIG PATHS ${LLVM_DIR}/../clang NO_DEFAULT_PATH)

    # Compile the helper functions into an object file
    set(HELPERS_OBJ ${CMAKE_CURRENT_BINARY_DIR}/test_helpers.o)
    add_custom_command(
        OUTPUT ${HELPERS_OBJ}
        COMMAND
            $<TARGET_FILE:clang>
            -c ${CMAKE_CURRENT_SOURCE_DIR}/codegen/helpers.c
            -o ${HELPERS_OBJ}
        DEPENDS clang ${CMAKE_CURRENT_SOURCE_DIR}/codegen/helpers.c)
    add_custom_target(test_helpers ALL DEPENDS ${HELPERS_OBJ})

    # Look for libm, which is necessary on *nix systems when
    # using transcendental functions like sin() and friends
    include(CheckLibraryExists)
    check_library_exists(m sin "" HAS_MATH_LIB)
    set(MATH_LIB "")
    if (HAS_MATH_LIB)
        set(MATH_LIB "-lm")
    endif ()

    function(add_codegen_test)
        cmake_parse_arguments(test "" "NAME;REFERENCE" "SOURCE_FILES;ARGS" ${ARGN})
        # The test executable has to be linked with clang, because on some distros,
        # gcc refuses to link properly the object file generated by clang.
        add_custom_command(
            OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/test_${test_NAME}
            COMMAND $<TARGET_FILE:artic> ${test_SOURCE_FILES} --emit-llvm -o ${test_NAME}
            COMMAND $<TARGET_FILE:clang> ${test_NAME}.ll ${MATH_LIB} ${HELPERS_OBJ} -o test_${test_NAME}
            DEPENDS artic clang test_helpers ${test_SOURCE_FILES}
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
        add_custom_target(test_${test_NAME} ALL DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/test_${test_NAME})
        add_test(
            NAME ${test_NAME}
            COMMAND
                ${CMAKE_COMMAND}
                "-DTEST_NAME=${test_NAME}"
                "-DTEST_EXECUTABLE=${CMAKE_CURRENT_BINARY_DIR}/test_${test_NAME}"
                "-DTEST_REFERENCE=${test_REFERENCE}"
                "-DTEST_ARGS=${test_ARGS}"
                -P ${CMAKE_CURRENT_SOURCE_DIR}/run_codegen_test.cmake
            WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
        list(APPEND CODEGEN_TESTS test_${test_NAME})
        set(CODEGEN_TESTS ${CODEGEN_TESTS} PARENT_SCOPE)
    endfunction()

    add_codegen_test(
        NAME codegen_fannkuch
        ARGS 8
        SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/codegen/fannkuch.art
        REFERENCE ${CMAKE_CURRENT_SOURCE_DIR}/codegen/fannkuch.ref)
    add_codegen_test(
        NAME codegen_meteor
        ARGS 2098
        SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/codegen/meteor.art
        REFERENCE ${CMAKE_CURRENT_SOURCE_DIR}/codegen/meteor.ref)
    add_codegen_test(
        NAME codegen_aobench
        ARGS ""
        SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/codegen/aobench.art
        REFERENCE ${CMAKE_CURRENT_SOURCE_DIR}/codegen/aobench.ref)
    add_codegen_test(
        NAME codegen_mandelbrot
        ARGS 1024
        SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/codegen/mandelbrot.art
        REFERENCE ${CMAKE_CURRENT_SOURCE_DIR}/codegen/mandelbrot.ref)
    add_codegen_test(
        NAME codegen_shapes
        ARGS ""
        SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/codegen/shapes.art ${CMAKE_CURRENT_SOURCE_DIR}/simple/vec_math.art)
    add_codegen_test(
        NAME codegen_compare
        SOURCE_FILES ${CMAKE_CURRENT_SOURCE_DIR}/codegen/compare.art)
endif ()

if (CODE_COVERAGE AND CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(COVERAGE_EXCLUDES "${CMAKE_CURRENT_SOURCE_DIR}/codegen/*")
    setup_target_for_coverage_gcovr_html(
        NAME coverage
        EXECUTABLE ctest -j ${PROCESSOR_COUNT}
        DEPENDENCIES artic ${CODEGEN_TESTS})
endif ()
