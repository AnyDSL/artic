trait BitOps[T] where Not[T], And[T], Or[T], Xor[T] {}
trait Shift[T] where LShift[T], RShift[T] {}
trait Num[T] where Add[T], Sub[T], Mul[T], Div[T], Rem[T], FromInt[T] {}
trait Int[T] where Num[T], Shift[T], BitOps[T] {}
trait Float[T] where Num[T], FromFloat[T] {}

#[allow_undecidable_impl]
impl[T] BitOps[T] where Not[T], And[T], Or[T], Xor[T] {}
#[allow_undecidable_impl]
impl[T] Shift[T] where LShift[T], RShift[T] {}
#[allow_undecidable_impl]
impl[T] Num[T] where Add[T], Sub[T], Mul[T], Div[T], Rem[T], FromInt[T] {}
#[allow_undecidable_impl]
impl[T] Int[T] where Num[T], Shift[T], BitOps[T] {}
#[allow_undecidable_impl]
impl[T] Float[T] where Num[T], FromFloat[T] {}
